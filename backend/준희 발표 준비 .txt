// 소비기한 계산 기능

controllers/expirationController.js

// 소비기한 계산 함ㅅ ㅜ
const calculateExpiration = (date, shelfLifeDays) => {
    const expirationDate = new Date(date);
    expirationDate.setDate(expirationDate.getDate() + shelfLifeDays);
    return expirationDate;
};

// 클라이언트 측에서 새 제품 추가
exports.addProduct = async (req, res) => {
    try {
        const { name, manufactureDate, shelfLifeDays, category, openedDate } = req.body;
        if (!name || !openedDate || !category) {
            return res.status(400).json({ error: '이름, 개봉일자, 카테고리는 필수 입력 항목입니다.' });
        }
        if (isNaN(new Date(openedDate))) {
            return res.status(400).json({ error: '유효한 개봉일자를 입력하세요.' });
        }
        if (manufactureDate && isNaN(new Date(manufactureDate))) {
            return res.status(400).json({ error: '유효한 제조일자를 입력하세요.' });
        }

        let expirationDate;
        let finalShelfLifeDays = shelfLifeDays;

        if (!shelfLifeDays) {
            const categoryInfo = await Category.findByPk(category);
            if (!categoryInfo) {
                return res.status(400).json({ error: '유효한 카테고리를 찾을 수 없습니다.' });
            }
            finalShelfLifeDays = categoryInfo.shelfLifeDays;
            expirationDate = calculateExpiration(openedDate, finalShelfLifeDays);
        } else {
            expirationDate = calculateExpiration(openedDate, shelfLifeDays);
        }

        const product = await Product.create({
            name,
            manufactureDate,
            shelfLifeDays: finalShelfLifeDays,
            expirationDate,
            category,
            openedDate
        });

        res.status(201).json(product);
    } catch (error) {
        console.error("제품 추가 중 오류가 발생했습니다:", error);
        res.status(500).json({ error: '제품 추가 중 오류가 발생했습니다.' });
    }
};

// 모든 제품 조회
exports.getProducts = async (req, res) => {
    try {
        const products = await Product.findAll({
            include: {
                model: Category,
                attributes: ['name'], // 카테고리 이름 포함
            },
        });
        res.status(200).json(products);
    } catch (error) {
        console.error("제품 조회 중 오류가 발생했습니다:", error);
        res.status(500).json({ error: '제품 조회 중 오류가 발생했습니다.' });
    }
};


// 특정 제품 업데이트

exports.updateProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, manufactureDate, shelfLifeDays, category, openedDate } = req.body;

        const product = await Product.findByPk(id);
        if (!product) {
            return res.status(404).json({ error: '제품을 찾을 수 없습니다.' });
        }

        if (openedDate && isNaN(new Date(openedDate))) {
            return res.status(400).json({ error: '유효한 개봉일자를 입력하세요.' });
        }
        if (manufactureDate && isNaN(new Date(manufactureDate))) {
            return res.status(400).json({ error: '유효한 제조일자를 입력하세요.' });
        }

        if (name) product.name = name;
        if (manufactureDate) product.manufactureDate = manufactureDate;
        if (openedDate) product.openedDate = openedDate;
        if (category) {
            const categoryInfo = await Category.findByPk(category);
            if (!categoryInfo) {
                return res.status(400).json({ error: '유효한 카테고리를 찾을 수 없습니다.' });
            }
            product.category = category;
        }

        if (shelfLifeDays) {
            product.shelfLifeDays = shelfLifeDays;
            product.expirationDate = calculateExpiration(product.openedDate, shelfLifeDays);
        } else if (openedDate) {
            const categoryInfo = await Category.findByPk(product.category);
            product.expirationDate = calculateExpiration(openedDate, categoryInfo.shelfLifeDays);
        }

        await product.save();

        res.status(200).json(product);
    } catch (error) {
        console.error("제품 업데이트 중 오류가 발생했습니다:", error);
        res.status(500).json({ error: '제품 업데이트 중 오류가 발생했습니다.' });
    }
};




2. models/product.js 및 models/category.js
